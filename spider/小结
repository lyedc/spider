抓取豆瓣点电影:
    先去请求 分析url 看请求方式 需要什么样的参数  格式化参数

自定义handerl的流程L:
    1 创建一个handler对象  使用的是 urllib2.HTTPHandler()
    2 创建opener对象 使用的是 urllib2.builder_opener(httphandler)
    3 构造请求 使用 urllib2.Request(url, header)
    4 使用自己构造的opener()来发送请求 opener.open(request)


使用免费代理：
    直接把免费代理的主机地址和端口号 传入就可以了 主要是一个键值对的形式的
        字典 {‘http':"1231231231:90000"} 构造字典后直接传入到需要代理的hander中就咳哟了



"""
代理设置的流程p：
    1 先构建代理处理器  proxyhandler({代理的ip地址和端口号})
    2 构建opener（）对象 使用 urllib2.build_opener(http_proxy_handler)
    3 构建请求 urllib2.Request(url, data, headers)
    4 发送请求  opener.open(request)

"""


"""
web 客户端验证流程：
    先指定自己的账号 密码 站点
    1 先创建密码管理器对象：urllib2.HTTPPasswordMGRWITHDEFAULTEADLM（）
    2 使用创建出来的管理器对象添加用户的信息和站点信息
    3 构建认证的代理 使用 urllib2.HTTPBasicAuthHandler(None,uri=server,user=  passwd=)
    4 构建opener对象  使用 urllib2.build_opener(认证代理对象)
    4 构建请求对象  urllib2.request（url headers）
    5 发送请求：opener.open(request)
"""


直接使用coolkie去登录的话  需要保持页面不能退出登录状态  当退出登录状态的话
    页面的cookie就会被删除了 在去使用程序进行登录的话 就不能进行登录了
    每次登录的话 每次的cookie的值是会改变的



使用 post 和 cookie进行登录  需要进行登录的时候 需要 指定数据提交的url 登录时候 需要提交的 需要的表头的信息
    需要去获取表单提交的数据  服务端需要的表头信息 



使用request来进行请求:
    get:请求的参数
    def get(url, params=None, **kwargs):
    get 在使用代理的时候 后面直接跟上代理的参数
    使用代理和认证的方式 :
        字典参数
        proxies3 = {"http": "mr_mao_hacker:sffqry9r@61.158.163.130:16816"}
        response = requests.get('http://www.baidu.com', proxiesp=proxies3)
    认证:
        元组参数
        auth = ('test', '123456')
        response = requests.get('http://192.168.199.107', auth=auth)

    在使用request百度的时候 关键字的参数为 wd  在win下面是kw

    post 请求的参数
    def post(url, data=None, json=None, **kwargs):
    response = requests.post(url, data=data, headers=headers)



requests 在使用cookie 和session



    使用cookie
       发起请求后就可以在请求返回的响应中获取到自己的cookiejar对象
       cookie_jar = requests.get('http://www.baodu.com').cookies
       返回的cookie_jar 就是一个cookiejar对象  然后转换成对应的字典形式
        requests.utils.dict_from_cookiejar(cookie_jar)

    使用session
        1 创建 session = requests.session()来保存cookie
        2 处理头信息 headers  和  url
        2 通过创建的session对象去发送请求
            response = session.post(url, data=data, headers=headers)
            response = session.get(url, parmars =parmas , headers=headers)
        返回的response 中就包含了 返回的内容和cookie的信息
        cookie = session.cookie 获取到返回的cookie
        5 通过在session中保存的cookie的信息 去查看自己的好友的界面
            session.get(url) (url 为好友的url地址) 每访问一个地址 都会自动的更新存在session中的coolie的值

使用request进行模拟的登录
    当使用的是已知的cookie的时候 直接发送get请求 把自己已经登录的cookie信息 放入到头信息中带入到请求中
        这样就可以了
    当在使用requests 使用账户密码直接进行登录的时候 需要发送的post请求
        把自己的账号信息 密码 构建成字典的形式 进行传入 然后实现登录 带上必要的头信息


item  shi  jian  zhi  dui de  xing  shi